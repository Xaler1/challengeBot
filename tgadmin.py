from datetime import datetime
import multiprocessing as mp
import telebot
from models import Users
import pickle
from os import path
import re

TB_BOT_TOKEN = "1432792475:AAHAvDJiucpui_hPDyOLeGVtYCQJhMCbFFA"

bot = telebot.TeleBot(TB_BOT_TOKEN)
queue = mp.Queue()
active = False
phone_pattern = re.compile("(?:\+7|8)[0-9]{10}")


def getFine(times):
    if times == 0:
        return 0
    else:
        return getFine(times - 1) + times * 35 - 5

def timeMonitor(queue):
    chat_id = 0
    start_day = 0
    week = 1
    week_updated = False
    day_updated = False
    reminded = False
    active = False
    while True:
        if not queue.empty():
            result = queue.get()
            if isinstance(result, int):
                chat_id = result
                start_day = pickle.load(open("start.pkl", "rb"))
                week = 0
                week_updated = False
                day_updated = False
                reminded = False
                active = True
        while active:
            if datetime.now().hour == 0 and datetime.now().weekday() == start_day and not week_updated:
                week_updated = True
                week += 1
                bot.send_message(chat_id, "–ü–æ—à–ª–∞ " + str(week) + "-–∞—è –Ω–µ–¥–µ–ª—è")
                for user in Users.select().execute():
                    user.rests = 2
                    user.save()
            if datetime.now().weekday() != start_day and week_updated:
                week_updated = False
            if datetime.now().hour == 21 and not day_updated:
                day_updated = True
                bot.send_message(chat_id, "–î–µ–Ω—å –æ–∫–æ–Ω—á–µ–Ω.")
                for user in Users.select().execute():
                    if not user.sick:
                        if not user.done_today:
                            if user.rests == 0:
                                user.fails += 1
                                bot.send_message(chat_id,
                                                 user.name + " –∑–∞–±—ã–ª –ø–æ—Ç—Ä–µ–Ω–µ—Ä–æ–≤–∞—Ç—å—Å—è!ü§¶‚Äç‚ôÇÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω —à—Ç—Ä–∞—Ñ - " + str(getFine(user.fails) - getFine(user.fails - 1))
                                                 + "—Ä—É–±. (–û–±—â–∏–π - " + str(getFine(user.fails) + "—Ä—É–±.)"))
                            else:
                                user.rests -= 1
                    user.done_today = False
                    user.save()
                bot.send_message(chat_id, get_leaderboard())
            if datetime.now().hour == 1 and day_updated:
                day_updated = False
            if datetime.now().hour == 20 and datetime.now().minute == 30 and not reminded:
                reminded = True
                text = "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞, –∫–æ–º—É –µ—â–µ –Ω–∞–¥–æ –ø–æ—Ç—Ä–µ–Ω–µ—Ä–æ–≤–∞—Ç—å—Å—è:\n"
                i = 0
                for user in Users.select().execute():
                    if user.sick:
                        i += 1
                        text += user.name + " - –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π."
                    elif not user.done_today:
                        i += 1
                        if user.rests > 0:
                            text += user.name + " - –Ω–µ–ø–ª–æ—Ö–æ –±—ã.\n"
                        else:
                            text += "@" + user.username + " - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —à—Ç—Ä–∞—Ñ.\n"
                if i == 0:
                    bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è –≤—Å–µ –º–æ–ª–æ–¥—Ü—ã –∏ —É–∂–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—åüí™üí™üí™")
                else:
                    bot.send_message(chat_id, text)
            if datetime.now().hour == 21 and reminded:
                reminded = False
            if not queue.empty():
                if isinstance(queue.get, str):
                    active = False

@bot.message_handler(commands=['start'])
def start(message):
    global active
    if not active:
        pickle.dump(datetime.now().weekday(), open("start.pkl", "wb"))
        Users.truncate_table()
        bot.send_message(message.chat.id, "–ß—ç–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞–ª—Å—è!")
        queue.put(message.chat.id)
        active = True
    else:
        bot.send_message(message.chat.id, "–ß–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")


@bot.message_handler(commands=['resume'])
def resume(message):
    global active
    if path.exists("start.pkl"):
        if not active:
            bot.send_message(message.chat.id, "–í–æ–∑–æ–±–Ω–æ–ª—è—é —á–µ–ª–ª–µ–Ω–¥–∂.")
            queue.put(message.chat.id)
            active = True
        else:
            bot.send_message(message.chat.id, "–ß–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–ß–µ–ª–ª–µ–Ω–¥–∂ –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")

@bot.message_handler(commands=['stop'])
def stop(message):
    global active
    if active:
        bot.send_message(message.chat.id, "–ß–µ–ª–ª–µ–Ω–¥–∂ –æ–∫–æ–Ω—á–µ–Ω.")
        queue.put("stop")
        active = False
        fines(message)
    else:
        bot.send_message(message.chat.id, "–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

@bot.message_handler(commands=['sick'])
def sick(message):
    if active:
        user = Users.get_or_none(tel_id=message.from_user.id)
        if user == None:
            bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫–∏!")
        else:
            if not user.sick:
                user.sick = True
                user.save()
                bot.send_message(message.chat.id, user.name + ", –≤—ã —Ç–µ–ø–µ—Ä—å –±–æ–ª—å–Ω–æ–π.")
            else:
                bot.send_message(message.chat.id, user.name + ", –≤—ã –∏ —Ç–∞–∫ –±–æ–ª—å–Ω–æ–π.")

@bot.message_handler(commands=['notsick'])
def sick(message):
    if active:
        user = Users.get_or_none(tel_id=message.from_user.id)
        if user == None:
            bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫–∏!")
        else:
            if user.sick:
                user.sick = False
                user.save()
                bot.send_message(message.chat.id, user.name + ", –≤—ã –±–æ–ª—å—à–µ –Ω–µ –±–æ–ª—å–Ω–æ–π.")
            else:
                bot.send_message(message.chat.id, user.name + ", –≤—ã –∏ —Ç–∞–∫ –Ω–µ –±–æ–ª—å–Ω–æ–π.")


@bot.message_handler(commands=['fines'])
def fines(message):
    text = "–†–∞–∑–±–∏–≤–∫–∞ –∫—Ç–æ –∫–æ–º—É —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω:\n"
    total = 0
    for user in Users.select().order_by(Users.fails.asc()).execute():
        total += user.done
    for user in Users.select().execute():
        if user.fails > 0:
            text += user.name + "(" + user.phone + " " + user.bank + ")" + " –¥–æ–ª–∂–µ–Ω:\n"
            for other_user in Users.select().execute():
                if other_user.tel_id != user.tel_id:
                    Iowe = round((other_user.done / (total - user.done)) * getFine(user.fails))
                    TheyOwe = round((other_user.done / (total - other_user.done)) * getFine(other_user.fails))
                    if Iowe > TheyOwe:
                        text += str(Iowe - TheyOwe) + "—Ä—É–±. - " + other_user.name + "\n"
        else:
            text += user.name + " –Ω–∏–∫–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–µ–Ω\n"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['sfines'])
def simpleFines(message):
    text = "–†–∞–∑–±–∏–≤–∫–∞ –∫–æ–º—É —Å–∫–æ–ª—å–∫–æ –∏–∑ –æ–±—â–µ–≥–æ –±–∞–Ω–∫–∞:\n"
    total_ex = 0
    total_money = 0
    for user in Users.select().order_by(Users.fails.asc()).execute():
        total_ex += user.done
        total_money += getFine(user.fails)
    for user in Users.select().execute():
       text += str(round(total_money * (user.done/total_ex))) + "—Ä—É–±. - " + user.name + "\n"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['setphone'])
def setPhone(message):
    parts = message.text.split(" ")
    if len(parts) == 3:
        if phone_pattern.match(parts[1]):
            user = Users.get_or_none(tel_id=message.from_user.id)
            if user != None:
                user.phone = parts[1]
                user.bank = parts[2]
                bot.reply_to(message, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –±–∞–Ω–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ")
                user.save()
            else:
                bot.reply_to(message, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–∞–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ.")
        else:
            bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    else:
        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")

@bot.message_handler(commands=["help", "commands"])
def help(message):
    text = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n" \
           "/start - –Ω–∞—á–∞—Ç—å —á—ç–ª–ª–µ–Ω–¥–∂\n" \
           "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n" \
           "/resume - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —á—ç–ª–ª–µ–Ω–¥–∂\n" \
           "/sick - –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –∫–∞–∫ –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º\n" \
           "/notsick - –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –∫–∞–∫ –Ω–µ –Ω–∞ –±–æ—å–Ω–∏—á–Ω–æ–º\n" \
           "/leaderboard - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥\n" \
           "/fines - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∫–æ–º—É —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω\n" \
           "/setphone <—Ç–µ–ª–µ—Ñ–æ–Ω> <–±–∞–Ω–∫> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –±–∞–Ω–∫"
    bot.send_message(message.chat.id, text)

@bot.message_handler(content_types=["photo"])
def done(message):
    if active:
        user = Users.get_or_none(tel_id=message.from_user.id)
        if user == None:
            Users.create(tel_id=message.from_user.id, name=message.from_user.first_name, username=message.from_user.username)
            user = Users.get(tel_id=message.from_user.id)
            bot.send_message(message.chat.id, user.name + " –±—ã–ª –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        if not user.done_today:
            if user.sick:
                bot.reply_to(message, "–í–∏–¥–∏–º–æ –≤—ã –±–æ–ª—å—à–µ –Ω–µ –±–æ–ª—å–Ω—ã.")
                user.sick = False
            user.done_today = True
            user.done += 1
            user.save()
            bot.reply_to(message, f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞! –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {user.done}")
        else:
            bot.reply_to(message, f"2 —Ä–∞–∑–∞ –∑–∞ –¥–µ–Ω—å –ø–µ—Ä–µ–±–æ—Ä) –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {user.done}")


def get_leaderboard():
    mes = "–õ–∏–¥–µ—Ä –±–æ—Ä–¥ üëäüèº\n\n"
    for i, user in enumerate(Users.select().order_by(Users.done.desc()).execute()):
        if user.fails:
            mes += f"{i + 1}. {user.name} - {user.done} [{user.rests}] (-{getFine(user.fails)})"
        else:
            mes += f"{i + 1}. {user.name} - {user.done} [{user.rests}] üí™"
        if user.sick:
            mes += " - –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º \n"
        else:
            mes += "\n"
    return mes


@bot.message_handler(commands=['leaderboard'])
def text_mes(message):
    bot.send_message(message.chat.id, get_leaderboard())



if __name__ == "__main__":
    print("Start")
    bot_process = mp.Process(target=timeMonitor, args=(queue, ))
    bot_process.daemon = True
    bot_process.start()
    bot.polling(none_stop=True, timeout=60)
